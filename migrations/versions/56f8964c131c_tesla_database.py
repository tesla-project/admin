"""TeSLA Database

Revision ID: 56f8964c131c
Revises: 
Create Date: 2018-02-15 21:01:36.125572

"""
#  TeSLA Admin
#  Copyright (C) 2019 Universitat Oberta de Catalunya
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU Affero General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU Affero General Public License for more details.
#
#  You should have received a copy of the GNU Affero General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '56f8964c131c'
down_revision = 'fef416e40844'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('activity',
        sa.Column('created', sa.DateTime(), nullable=False),
        sa.Column('updated', sa.DateTime(), nullable=True),
        sa.Column('id', sa.BigInteger(), nullable=False),
        sa.Column('vle_id', sa.Integer(), nullable=False),
        sa.Column('activity_type', sa.String(), nullable=False),
        sa.Column('activity_id', sa.String(), nullable=False),
        sa.Column('conf', sa.LargeBinary(), nullable=True),
        sa.PrimaryKeyConstraint('id'),
        info={"ifexists": True}
    )
    op.create_index('idx_activity_type_activity_id', 'activity', [sa.text('activity_id ASC'),
                                                                  sa.text('activity_type ASC')],
                    unique=False, info={"ifexists": True})

    op.create_table('instrument',
        sa.Column('created', sa.DateTime(), nullable=False),
        sa.Column('updated', sa.DateTime(), nullable=True),
        sa.Column('id', sa.BigInteger(), nullable=False),
        sa.Column('name', sa.String(), nullable=False),
        sa.Column('acronym', sa.String(), nullable=False, unique=True),
        sa.Column('url', sa.String(), nullable=True),
        sa.Column('port', sa.Integer(), nullable=True),
        sa.Column('active', sa.Boolean(), nullable=False),
        sa.Column('has_licence', sa.Boolean(), nullable=False, default=False),
        sa.Column('requires_enrollment', sa.Boolean(), nullable=False, default=False),
        sa.PrimaryKeyConstraint('id'),
        info={"ifexists": True}
    )
    op.create_index('idx_instrument_acronym', 'instrument', [sa.text('acronym ASC')], unique=True,
                    info={"ifexists": True})


    op.create_table('informed_consent',
        sa.Column('created', sa.DateTime(), nullable=False),
        sa.Column('updated', sa.DateTime(), nullable=True),
        sa.Column('id', sa.BigInteger(), nullable=False),
        sa.Column('version', sa.String(), nullable=False),
        sa.Column('valid_from', sa.DateTime(), nullable=False),
        sa.PrimaryKeyConstraint('id'),
        info={"ifexists": True}
    )

    op.create_table('informed_consent_document',
        sa.Column('created', sa.DateTime(), nullable=False),
        sa.Column('updated', sa.DateTime(), nullable=True),
        sa.Column('consent_id', sa.BigInteger(), nullable=False),
        sa.Column('language', sa.String(), nullable=False),
        sa.Column('html', sa.LargeBinary(), nullable=True),
        sa.Column('pdf', sa.LargeBinary(), nullable=True),
        sa.ForeignKeyConstraint(['consent_id'], ['informed_consent.id'], ),
        sa.PrimaryKeyConstraint('consent_id', 'language'),
        info={"ifexists": True}
    )

    op.create_table('learner',
        sa.Column('created', sa.DateTime(), nullable=False),
        sa.Column('updated', sa.DateTime(), nullable=True),
        sa.Column('tesla_id', sa.String(length=64), nullable=False),
        sa.Column('crypto_data', sa.LargeBinary(), nullable=True),
        sa.Column('consent_id', sa.BigInteger(), nullable=True),
        sa.Column('consent_accepted', sa.DateTime(), nullable=True),
        sa.Column('consent_rejected', sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(['consent_id'], ['informed_consent.id'], ),
        sa.PrimaryKeyConstraint('tesla_id'),
        info={"ifexists": True}
    )

    op.create_table('enrollment',
        sa.Column('created', sa.DateTime(), nullable=False),
        sa.Column('updated', sa.DateTime(), nullable=True),
        sa.Column('tesla_id', sa.String(length=64), nullable=False),
        sa.Column('instrument_id', sa.BigInteger(), nullable=False),
        sa.Column('percentage', sa.Numeric(), nullable=False),
        sa.Column('status', sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(['tesla_id'], ['learner.tesla_id'], ),
        sa.ForeignKeyConstraint(['instrument_id'], ['instrument.id'], ),
        sa.PrimaryKeyConstraint('tesla_id', 'instrument_id'),
        info={"ifexists": True}
    )
    op.create_index('idx_enrollment_tesla_id', 'enrollment', [sa.text('tesla_id ASC')], unique=False,
                    info={"ifexists": True})

    op.create_table('enrollment_model',
        sa.Column('created', sa.DateTime(), nullable=False),
        sa.Column('updated', sa.DateTime(), nullable=True),
        sa.Column('tesla_id', sa.String(length=64), nullable=False),
        sa.Column('instrument_id', sa.BigInteger(), nullable=False),
        sa.Column('status', sa.Integer(), nullable=False),
        sa.Column('locked', sa.Boolean(), nullable=False, default=False),
        sa.Column('data', sa.LargeBinary(), nullable=True),
        sa.ForeignKeyConstraint(['tesla_id'], ['learner.tesla_id'], ),
        sa.ForeignKeyConstraint(['instrument_id'], ['instrument.id'], ),
        sa.PrimaryKeyConstraint('tesla_id', 'instrument_id'),
        info={"ifexists": True}
    )
    op.create_index('idx_enrollment_model_tesla_id', 'enrollment_model', [sa.text('tesla_id ASC')], unique=False,
                    info={"ifexists": True})

    op.create_table('activity_instrument',
        sa.Column('instrument_id', sa.BigInteger(), nullable=False),
        sa.Column('activity_id', sa.BigInteger(), nullable=False),
        sa.Column('alternative_instrument_id', sa.BigInteger(), nullable=True),
        sa.Column('required', sa.Boolean, nullable=False, default=True),
        sa.Column('active', sa.Boolean, nullable=False, default=True),
        sa.ForeignKeyConstraint(['activity_id'], ['activity.id'], ),
        sa.ForeignKeyConstraint(['alternative_instrument_id'], ['instrument.id'], ),
        sa.ForeignKeyConstraint(['instrument_id'], ['instrument.id'], ),
        sa.PrimaryKeyConstraint('instrument_id', 'activity_id'),
        info={"ifexists": True}
    )
    op.create_table('instrument_queue',
        sa.Column('created', sa.DateTime(), nullable=False),
        sa.Column('updated', sa.DateTime(), nullable=True),
        sa.Column('instrument_id', sa.BigInteger(), nullable=False),
        sa.Column('queue', sa.String(), nullable=False),
        sa.Column('consumers', sa.Integer(), nullable=False, default=0),
        sa.Column('pending_tasks', sa.Integer(), nullable=False, default=0),
        sa.Column('tendency1', sa.Integer(), nullable=False, default=0),
        sa.Column('tendency2', sa.Integer(), nullable=False, default=0),
        sa.ForeignKeyConstraint(['instrument_id'], ['instrument.id'], ),
        sa.PrimaryKeyConstraint('instrument_id'),
        info={"ifexists": True}
    )
    op.create_table('request',
        sa.Column('created', sa.DateTime(), nullable=False),
        sa.Column('updated', sa.DateTime(), nullable=True),
        sa.Column('start', sa.DateTime(), nullable=False),
        sa.Column('end', sa.DateTime(), nullable=True),
        sa.Column('id', sa.BigInteger(), nullable=False),
        sa.Column('tesla_id', sa.String(length=64), nullable=False),
        sa.Column('status', sa.Integer(), nullable=False),
        sa.Column('activity_id', sa.BigInteger(), nullable=True),
        sa.Column('is_enrolment', sa.Boolean(), nullable=True),
        sa.Column('instrument_list', sa.String(), nullable=False),
        sa.ForeignKeyConstraint(['tesla_id'], ['learner.tesla_id'], ),
        sa.ForeignKeyConstraint(['activity_id'], ['activity.id'], ),
        sa.PrimaryKeyConstraint('id'),
        info={"ifexists": True}
    )
    op.create_table('request_data',
        sa.Column('created', sa.DateTime(), nullable=False),
        sa.Column('updated', sa.DateTime(), nullable=True),
        sa.Column('request_id', sa.BigInteger(), nullable=False),
        sa.Column('data', sa.LargeBinary(), nullable=False),
        sa.ForeignKeyConstraint(['request_id'], ['request.id'], ),
        info={"ifexists": True}
    )
    op.create_table('request_result',
        sa.Column('created', sa.DateTime(), nullable=False),
        sa.Column('updated', sa.DateTime(), nullable=True),
        sa.Column('start', sa.DateTime(), nullable=False),
        sa.Column('end', sa.DateTime(), nullable=True),
        sa.Column('instrument_id', sa.BigInteger(), nullable=False),
        sa.Column('request_id', sa.BigInteger(), nullable=False),
        sa.Column('result', sa.Numeric(), nullable=True),
        sa.Column('detail', sa.String(), nullable=True),
        sa.Column('error_code', sa.Numeric(), nullable=True),
        sa.Column('error_message', sa.String(), nullable=True),
        sa.Column('status', sa.Integer(), nullable=False),
        sa.Column('progress', sa.Numeric(), nullable=False),
        sa.Column('num_retry', sa.Integer(), nullable=False, default=0),
        sa.ForeignKeyConstraint(['instrument_id'], ['instrument.id'], ),
        sa.ForeignKeyConstraint(['request_id'], ['request.id'], ),
        sa.PrimaryKeyConstraint('instrument_id', 'request_id'),
        info={"ifexists": True}
    )
    op.create_table('request_audit',
        sa.Column('created', sa.DateTime(), nullable=False),
        sa.Column('updated', sa.DateTime(), nullable=True),
        sa.Column('instrument_id', sa.BigInteger(), nullable=False),
        sa.Column('request_id', sa.BigInteger(), nullable=False),
        sa.Column('enrolment', sa.Boolean(), nullable=False, default=True),
        sa.Column('request', sa.Boolean(), nullable=False, default=True),
        sa.Column('data', sa.LargeBinary(), nullable=True),
        sa.ForeignKeyConstraint(['instrument_id'], ['instrument.id'], ),
        sa.ForeignKeyConstraint(['request_id'], ['request.id'], ),
        sa.PrimaryKeyConstraint('instrument_id', 'request_id'),
        info={"ifexists": True}
    )
    op.create_table('tep_migrations',
        sa.Column('created', sa.DateTime(), nullable=False),
        sa.Column('updated', sa.DateTime(), nullable=True),
        sa.Column('element', sa.String(), nullable=False),
        sa.Column('offset', sa.BigInteger(), nullable=False, default=0),
        sa.PrimaryKeyConstraint('element'),
        info={"ifexists": True}
    )

    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('send_category',
        sa.Column('created', sa.DateTime(), nullable=False),
        sa.Column('updated', sa.DateTime(), nullable=True),
        sa.Column('id', sa.BigInteger(), nullable=False),
        sa.Column('description', sa.String(), nullable=False),
        sa.Column('data', sa.LargeBinary(), nullable=True),
        sa.PrimaryKeyConstraint('id'),
        info={"ifexists": True}
    )

    op.create_table('learner_send',
        sa.Column('created', sa.DateTime(), nullable=False),
        sa.Column('updated', sa.DateTime(), nullable=True),
        sa.Column('tesla_id', sa.String(length=64), nullable=False),
        sa.Column('category_id', sa.BigInteger(), nullable=False),
        sa.Column('expires', sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(['category_id'], ['send_category.id'], ),
        sa.ForeignKeyConstraint(['tesla_id'], ['learner.tesla_id'], ),
        sa.PrimaryKeyConstraint('tesla_id', 'category_id'),
        info={"ifexists": True}
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('learner_send', info={"ifexists": True})
    op.drop_table('send_category', info={"ifexists": True})
    op.drop_table('tep_migrations', info={"ifexists": True})
    op.drop_table('request_audit', info={"ifexists": True})
    op.drop_table('request_data', info={"ifexists": True})
    op.drop_table('request_result', info={"ifexists": True})
    op.drop_table('request', info={"ifexists": True})
    op.drop_table('instrument_queue', info={"ifexists": True})
    op.drop_table('activity_instrument', info={"ifexists": True})
    op.drop_table('instrument', info={"ifexists": True})
    op.drop_index('idx_enrollment_tesla_id', table_name='enrollment', info={"ifexists": True})
    op.drop_table('enrollment', info={"ifexists": True})
    op.drop_table('learner', info={"ifexists": True})
    op.drop_table('informed_consent', info={"ifexists": True})
    op.drop_index('idx_activity_type_activity_id', table_name='activity', info={"ifexists": True})
    op.drop_table('activity', info={"ifexists": True})
    # ### end Alembic commands ###
