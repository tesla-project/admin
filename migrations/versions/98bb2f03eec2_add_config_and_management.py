"""Add configuration information and task management

Revision ID: 98bb2f03eec2
Revises: b3310d197152
Create Date: 2018-04-06 11:45:17.125276

"""
#  TeSLA Admin
#  Copyright (C) 2019 Universitat Oberta de Catalunya
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU Affero General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU Affero General Public License for more details.
#
#  You should have received a copy of the GNU Affero General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '98bb2f03eec2'
down_revision = 'b3310d197152'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('configuration',
        sa.Column('created', sa.DateTime(), nullable=False),
        sa.Column('updated', sa.DateTime(), nullable=True),
        sa.Column('key', sa.String(length=128), nullable=False),
        sa.Column('description', sa.String(), nullable=True),
        sa.Column('value', sa.String(), nullable=True),
        sa.PrimaryKeyConstraint('key'),
        info={"ifexists": True}
    )
    op.create_table('vle',
        sa.Column('created', sa.DateTime(), nullable=False),
        sa.Column('updated', sa.DateTime(), nullable=True),
        sa.Column('id', sa.BigInteger(), nullable=False),
        sa.Column('vle_id', sa.BigInteger(), nullable=True),
        sa.Column('url', sa.String(), nullable=True),
        sa.Column('token', sa.String(), nullable=True),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('vle_id'),
        info={"ifexists": True}
    )
    op.create_table('task',
        sa.Column('created', sa.DateTime(), nullable=False),
        sa.Column('updated', sa.DateTime(), nullable=True),
        sa.Column('id', sa.BigInteger(), nullable=False),
        sa.Column('task_id', sa.String(length=155), nullable=True),
        sa.Column('status', sa.String(length=50), nullable=True),
        sa.Column('user_id', sa.BigInteger(), nullable=True),
        sa.Column('result', sa.LargeBinary(), nullable=True),
        sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
        sa.PrimaryKeyConstraint('id'),
        info={"ifexists": True}
    )
    op.add_column('course', sa.Column('vle_id', sa.BigInteger(), nullable=True))
    op.create_foreign_key('fk_course_vle', 'course', 'vle', ['vle_id'], ['id'], info={"ifexists": True})
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint('fk_course_vle', 'course', type_='foreignkey', info={"ifexists": True})
    op.drop_column('course', 'vle_id')
    op.drop_table('task', info={"ifexists": True})
    op.drop_table('vle', info={"ifexists": True})
    op.drop_table('configuration', info={"ifexists": True})
    # ### end Alembic commands ###
